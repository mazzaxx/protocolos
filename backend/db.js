import sqlite3 from 'sqlite3';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Obter __dirname em ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configura√ß√£o otimizada do SQLite para Square Cloud
const isProduction = process.env.NODE_ENV === 'production';
const dbPath = isProduction 
  ? path.join(process.cwd(), 'database.sqlite')
  : path.join(__dirname, 'database.sqlite');

console.log('üóÑÔ∏è Configurando SQLite otimizado para Square Cloud');
console.log('üìç Caminho do banco:', dbPath);
console.log('üåç Ambiente:', process.env.NODE_ENV || 'development');

// Conex√£o √∫nica SQLite para evitar locks no Square Cloud
class SQLiteConnection {
  constructor(dbPath) {
    this.dbPath = dbPath;
    this.db = null;
    this.isInitialized = false;
    this.queue = [];
    this.isProcessing = false;
  }

  async initialize() {
    if (this.isInitialized) return;
    
    console.log('üîó Inicializando conex√£o √∫nica SQLite - Square Cloud');
    
    return new Promise((resolve, reject) => {
      this.db = new sqlite3.Database(this.dbPath, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => {
        if (err) {
          console.error('‚ùå Erro ao criar conex√£o SQLite:', err);
          reject(err);
          return;
        }
        
        console.log('‚úÖ Conex√£o SQLite √∫nica criada');
        
        // Configura√ß√µes otimizadas para Square Cloud
        this.db.serialize(() => {
          // WAL mode para melhor concorr√™ncia
          this.db.run("PRAGMA journal_mode = WAL");
          
          // Configura√ß√µes de performance
          this.db.run("PRAGMA synchronous = NORMAL");
          this.db.run("PRAGMA cache_size = 10000"); // 10MB de cache
          this.db.run("PRAGMA temp_store = MEMORY");
          this.db.run("PRAGMA mmap_size = 268435456"); // 256MB memory-mapped I/O
          
          // Configura√ß√µes de timeout
          this.db.run("PRAGMA busy_timeout = 30000"); // 30 segundos timeout
          this.db.run("PRAGMA wal_autocheckpoint = 1000");
          
          // Otimiza√ß√µes
          this.db.run("PRAGMA optimize");
          
          console.log('‚öôÔ∏è Configura√ß√µes SQLite aplicadas');
        });
        
        this.isInitialized = true;
        resolve();
      });
    });
  }

  async execute(sql, params = []) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    return new Promise((resolve, reject) => {
      const startTime = Date.now();
      
      if (sql.toLowerCase().trim().startsWith('select') || sql.toLowerCase().includes('pragma')) {
        // Query de leitura
        this.db.all(sql, params, (err, rows) => {
          const duration = Date.now() - startTime;
          
          if (err) {
            console.error(`‚ùå Query error (${duration}ms):`, err.message);
            reject(err);
          } else {
            if (duration > 2000) {
              console.warn(`‚ö†Ô∏è Slow query (${duration}ms):`, sql.substring(0, 100));
            }
            resolve({ rows: rows || [] });
          }
        });
      } else {
        // Query de escrita
        this.db.run(sql, params, function(err) {
          const duration = Date.now() - startTime;
          
          if (err) {
            console.error(`‚ùå Query error (${duration}ms):`, err.message);
            reject(err);
          } else {
            if (duration > 2000) {
              console.warn(`‚ö†Ô∏è Slow query (${duration}ms):`, sql.substring(0, 100));
            }
            resolve({ 
              rowCount: this.changes,
              insertId: this.lastID,
              changes: this.changes
            });
          }
        });
      }
    });
  }

  async close() {
    if (this.db) {
      console.log('üîí Fechando conex√£o SQLite...');
      return new Promise((resolve) => {
        this.db.close((err) => {
          if (err) {
            console.error('‚ùå Erro ao fechar conex√£o:', err);
          } else {
            console.log('‚úÖ Conex√£o SQLite fechada');
          }
          resolve();
        });
      });
    }
  }
}

// Inst√¢ncia global da conex√£o
const connection = new SQLiteConnection(dbPath);

// Fun√ß√£o unificada para executar queries com retry autom√°tico
const query = async (sql, params = [], retries = 3) => {
  let attempt = 0;
  
  while (attempt < retries) {
    try {
      return await connection.execute(sql, params);
    } catch (error) {
      attempt++;
      console.error(`‚ùå Tentativa ${attempt}/${retries} falhou:`, error.message);
      
      if (attempt >= retries) {
        throw new Error(`Query failed after ${retries} attempts: ${error.message}`);
      }
      
      // Aguardar antes de tentar novamente
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
  }
};

// Fun√ß√£o para executar transa√ß√µes
const transaction = async (queries) => {
  try {
    await connection.execute("BEGIN TRANSACTION");
    
    const results = [];
    
    for (const queryData of queries) {
      const { sql, params = [] } = queryData;
      const result = await connection.execute(sql, params);
      results.push(result);
    }
    
    await connection.execute("COMMIT");
    return results;
  } catch (error) {
    await connection.execute("ROLLBACK");
    throw error;
  }
};

// Fun√ß√£o para inicializar o banco de dados
export const initializeDb = async () => {
  console.log('üöÄ Inicializando banco SQLite para Square Cloud...');
  
  try {
    // Aguardar inicializa√ß√£o da conex√£o
    await connection.initialize();
    
    // Verificar se o banco est√° funcionando
    console.log('üîç Testando conectividade b√°sica...');
    await query('SELECT 1 as test');
    console.log('‚úÖ Conectividade b√°sica confirmada');
    
    // Criar tabelas com √≠ndices otimizados
    console.log('üìã Criando tabela funcionarios...');
    await query(`
      CREATE TABLE IF NOT EXISTS funcionarios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        senha TEXT NOT NULL,
        permissao TEXT NOT NULL DEFAULT 'advogado',
        equipe TEXT DEFAULT NULL,
        first_login INTEGER NOT NULL DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Verificar se a coluna equipe existe, se n√£o existir, adicionar
    console.log('üîß Verificando estrutura da tabela funcionarios...');
    try {
      await query(`SELECT equipe FROM funcionarios LIMIT 1`);
      console.log('‚úÖ Coluna equipe j√° existe');
    } catch (error) {
      if (error.message.includes('no such column: equipe') || error.message.includes('has no column named equipe')) {
        console.log('‚ûï Adicionando coluna equipe √† tabela funcionarios...');
        await query(`ALTER TABLE funcionarios ADD COLUMN equipe TEXT DEFAULT NULL`);
        console.log('‚úÖ Coluna equipe adicionada com sucesso');
      } else {
        console.error('‚ùå Erro inesperado ao verificar coluna equipe:', error);
      }
    }

    // Verificar se a coluna first_login existe, se n√£o existir, adicionar
    try {
      await query(`SELECT first_login FROM funcionarios LIMIT 1`);
      console.log('‚úÖ Coluna first_login j√° existe');
    } catch (error) {
      if (error.message.includes('no such column: first_login') || error.message.includes('has no column named first_login')) {
        console.log('‚ûï Adicionando coluna first_login √† tabela funcionarios...');
        await query(`ALTER TABLE funcionarios ADD COLUMN first_login INTEGER NOT NULL DEFAULT 1`);
        console.log('‚úÖ Coluna first_login adicionada com sucesso');
      } else {
        console.error('‚ùå Erro inesperado ao verificar coluna first_login:', error);
      }
    }
    
    // √çndices para funcionarios
    await query(`CREATE INDEX IF NOT EXISTS idx_funcionarios_email ON funcionarios(email)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_funcionarios_permissao ON funcionarios(permissao)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_funcionarios_equipe ON funcionarios(equipe)`);
    
    // Criar tabela para equipes tempor√°rias (para equipes sem funcion√°rios)
    console.log('üìã Criando tabela equipes_temp...');
    await query(`
      CREATE TABLE IF NOT EXISTS equipes_temp (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE NOT NULL,
        gestor TEXT DEFAULT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Verificar se a coluna gestor existe, se n√£o existir, adicionar
    console.log('üîß Verificando estrutura da tabela equipes_temp...');
    try {
      await query(`SELECT gestor FROM equipes_temp LIMIT 1`);
      console.log('‚úÖ Coluna gestor j√° existe na tabela equipes_temp');
    } catch (error) {
      if (error.message.includes('no such column: gestor') || error.message.includes('has no column named gestor')) {
        console.log('‚ûï Adicionando coluna gestor √† tabela equipes_temp...');
        await query(`ALTER TABLE equipes_temp ADD COLUMN gestor TEXT DEFAULT NULL`);
        console.log('‚úÖ Coluna gestor adicionada com sucesso');
      } else {
        console.error('‚ùå Erro inesperado ao verificar coluna gestor:', error);
      }
    }

    await query(`CREATE INDEX IF NOT EXISTS idx_equipes_temp_nome ON equipes_temp(nome)`);
    
    console.log('üìã Criando tabela protocolos...');
    await query(`
      CREATE TABLE IF NOT EXISTS protocolos (
        id TEXT PRIMARY KEY,
        processNumber TEXT NOT NULL DEFAULT '',
        court TEXT NOT NULL DEFAULT '',
        system TEXT NOT NULL DEFAULT '',
        jurisdiction TEXT NOT NULL DEFAULT '',
        processType TEXT NOT NULL DEFAULT 'civel',
        isFatal INTEGER NOT NULL DEFAULT 0,
        needsProcuration INTEGER NOT NULL DEFAULT 0,
        procurationType TEXT DEFAULT '',
        needsGuia INTEGER NOT NULL DEFAULT 0,
        guias TEXT NOT NULL DEFAULT '[]',
        petitionType TEXT NOT NULL DEFAULT '',
        observations TEXT DEFAULT '',
        documents TEXT NOT NULL DEFAULT '[]',
        status TEXT NOT NULL DEFAULT 'Aguardando',
        assignedTo TEXT DEFAULT NULL,
        createdBy INTEGER NOT NULL,
        returnReason TEXT DEFAULT NULL,
        isDistribution INTEGER NOT NULL DEFAULT 0,
        taskCode TEXT NOT NULL DEFAULT '',
        createdAt TEXT NOT NULL,
        updatedAt TEXT NOT NULL,
        queuePosition INTEGER NOT NULL DEFAULT 1,
        activityLog TEXT NOT NULL DEFAULT '[]',
        FOREIGN KEY (createdBy) REFERENCES funcionarios (id)
      )
    `);

    // Adicionar coluna taskCode se n√£o existir (para bancos existentes)
    console.log('üîß Verificando estrutura da tabela protocolos...');
    try {
      await query(`SELECT taskCode FROM protocolos LIMIT 1`);
      console.log('‚úÖ Coluna taskCode j√° existe');
    } catch (error) {
      if (error.message.includes('no such column: taskCode') || error.message.includes('has no column named taskCode')) {
        console.log('‚ûï Adicionando coluna taskCode √† tabela protocolos...');
        await query(`ALTER TABLE protocolos ADD COLUMN taskCode TEXT NOT NULL DEFAULT ''`);
        console.log('‚úÖ Coluna taskCode adicionada com sucesso');
      } else {
        console.error('‚ùå Erro inesperado ao verificar coluna taskCode:', error);
      }
    }
    
    // √çndices cr√≠ticos para performance
    console.log('üîç Criando √≠ndices otimizados...');
    await query(`CREATE INDEX IF NOT EXISTS idx_protocolos_status ON protocolos(status)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_protocolos_assignedTo ON protocolos(assignedTo)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_protocolos_createdBy ON protocolos(createdBy)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_protocolos_createdAt ON protocolos(createdAt)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_protocolos_updatedAt ON protocolos(updatedAt)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_protocolos_status_assigned ON protocolos(status, assignedTo)`);
    await query(`CREATE INDEX IF NOT EXISTS idx_protocolos_queue_lookup ON protocolos(status, assignedTo, createdAt)`);
    
    // Trigger para atualizar updated_at automaticamente
    await query(`
      CREATE TRIGGER IF NOT EXISTS update_protocolos_timestamp 
      AFTER UPDATE ON protocolos
      BEGIN
        UPDATE protocolos SET updatedAt = datetime('now') WHERE id = NEW.id;
      END
    `);
    
    await query(`
      CREATE TRIGGER IF NOT EXISTS update_funcionarios_timestamp 
      AFTER UPDATE ON funcionarios
      BEGIN
        UPDATE funcionarios SET updated_at = datetime('now') WHERE id = NEW.id;
      END
    `);
    
    // Trigger para limpar equipes tempor√°rias quando funcion√°rios s√£o atribu√≠dos
    await query(`
      CREATE TRIGGER IF NOT EXISTS cleanup_temp_teams_on_assign
      AFTER UPDATE OF equipe ON funcionarios
      WHEN NEW.equipe IS NOT NULL
      BEGIN
        DELETE FROM equipes_temp WHERE nome = NEW.equipe;
      END
    `);
    
    await query(`
      CREATE TRIGGER IF NOT EXISTS cleanup_temp_teams_on_insert
      AFTER INSERT ON funcionarios
      WHEN NEW.equipe IS NOT NULL
      BEGIN
        DELETE FROM equipes_temp WHERE nome = NEW.equipe;
      END
    `);
    
    // N√£o limpar funcion√°rios existentes - manter dados persistentes
    console.log('‚ÑπÔ∏è Mantendo funcion√°rios existentes no banco de dados');

    // Criar usu√°rios de teste
    console.log('üë• Iniciando processo de cria√ß√£o de usu√°rios...');
    await createTestUsers();
    console.log('‚úÖ Processo de cria√ß√£o de usu√°rios conclu√≠do');
    
    // Otimizar banco ap√≥s cria√ß√£o
    console.log('‚ö° Otimizando banco de dados...');
    await query(`ANALYZE`);
    await query(`PRAGMA optimize`);
    
    // Estat√≠sticas finais
    const stats = await getDatabaseStats();
    console.log('üìä Estat√≠sticas do banco:', stats);
    console.log('üéâ Inicializa√ß√£o SQLite conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o do banco:', error);
    console.error('üìã Stack trace:', error.stack);
    throw error;
  }
};

// Fun√ß√£o para criar usu√°rios de teste
const createTestUsers = async () => {
  console.log('üë• Verificando usu√°rios no banco de dados...');

  // N√£o limpar funcion√°rios - manter todos os dados persistentes
  console.log('‚ÑπÔ∏è Mantendo todos os funcion√°rios existentes');

  // Definir equipes com gestores
  const equipes = {
    'Sa√∫de APS': {
      gestor: 'Rafael Rahner | NCA',
      membros: [
        "Ma√≠sa Abreu | NCA", "Tais Brand√£o | NCA", "Ana Catarina | NCA",
        "Ang√©lica Andrade | NCA", "Dayane Cristina | NCA", "Isabela Dornelas | NCA",
        "Layla Oliveira | NCA", "Thaisa Gomes | NCA", "Rafael Rahner | NCA"
      ]
    },
    'Ind BV/Super/Exec Fiscais': {
      gestor: 'Mayssa Marcella | NCA',
      membros: [
        "Camila Pimenta | NCA", "Carolina Vieira | NCA", "Din√° Souza | NCA",
        "Nathalia Cristina | NCA", "Stefani Caroline | NCA", "Mayssa Marcella | NCA",
        "Dayse Ferreira | NCA", "Lara Carolina | NCA"
      ]
    },
    'Revisional Santander/BV': {
      gestor: 'Juacy Leal | NCA',
      membros: [
        "Adriana Xavier | NCA", "Amanda Marques | NCA", "Andr√© Alencar | NCA",
        "Daiane Alves | NCA", "Elo√≠zio Andrade | NCA", "Gabriel Augusto | NCA",
        "Natalia Ferreira | NCA", "Priscila Alves | NCA", "Ramon Alves | NCA",
        "Rejane Oliveira | NCA", "Thalita Gonzaga | NCA", "Thiago Paiva | NCA",
        "Juacy Leal | NCA"
      ]
    },
    'Indenizat√≥rio Santander': {
      gestor: 'Thiago Johnson | NCA',
      membros: [
        "Ana Marinho | NCA", "Audrey Roberto | NCA", "Dayane Machado | NCA",
        "Isabela Nogueira | NCA", "Izadora Feital | NCA", "J√©ssica Oliveira | NCA",
        "Lucas Barroso | NCA", "Paloma Teodoro | NCA", "Pedro Gama | NCA",
        "Sabrina Alves | NCA", "Talita Freitas | NCA", "Thiago Johnson | NCA",
        "Northon Alencar | NCA"
      ]
    },
    'Indenizat√≥rio Santander 2': {
      gestor: 'Flaviana Estevam | NCA',
      membros: [
        "Arthur Ferreira | NCA", "Clara Pires | NCA", "Deivison Jos√© | NCA",
        "Idaelly Dutra | NCA", "Jo√£o Pedro Sales | NCA", "Juliana Ferreira | NCA",
        "Priscila Cristina | NCA", "Rinara de S√° | NCA", "Vandressa Barroso | NCA",
        "Flaviana Estevam | NCA", "Bruna Pedra | NCA"
      ]
    },
    'Trabalhista': {
      gestor: 'Luciano Alves | NCA',
      membros: [
        "Luciano Alves | NCA", "Ana Paula | NCA", "Beth√¢nia Couto | NCA",
        "Gleison Campos | NCA", "Isabela Veloso | NCA", "Julia Assis | NCA",
        "La√≠ssa Oliveira | NCA", "Marystela Bonf√° | NCA", "Patr√≠cia Lima | NCA",
        "Rosilene Cassiano | NCA", "Stephanie Prado | NCA"
      ]
    },
    'Safra': {
      gestor: 'Barbara Gallis | NCA',
      membros: [
        "J√©ssica Castro | NCA", "Debora Horta | NCA", "Beatriz Gondim | NCA",
        "Lara Oliveira | NCA", "Amanda Furtado | NCA", "Julia Maria | NCA",
        "Miguel Tavares | NCA", "Cinara Luisa | NCA", "Barbara Gallis | NCA"
      ]
    },
    'Relevantes': {
      gestor: 'Guilherme Pacheco | NCA',
      membros: [
        "Guilherme Pacheco | NCA", "Ronnie Godinho | NCA", "Paulo Cimini", "Samuel Barbosa | NCA"
      ]
    },
    'Encerramento/OBF': {
      gestor: null,
      membros: [
        "Felipe Santos | NCA", "Giovana Romanhol | NCA", "Luana Soares | NCA"
      ]
    },
    'Banco Pan': {
      gestor: 'Nivaldo Junior | NCA',
      membros: [
        "Nivaldo Junior | NCA", "Maria Fernanda | NCA", "Alexia Andrade | NCA", "Fernanda Faria | NCA"
      ]
    },
    'FSFX C√≠vel': {
      gestor: null,
      membros: [
        "Ronaldo Scarponi | NCA", "Clara Metzker | NCA"
      ]
    },
    'Unimed': {
      gestor: null,
      membros: [
        "Andre Richard | NCA", "Jessica Ferreira | NCA"
      ]
    },
    'Acordos': {
      gestor: 'Thiago Ribas | NCA',
      membros: [
        "Luana Cristina | NCA", "Igor Guimar√£es | NCA", "Thiago Ribas | NCA"
      ]
    },
    'BRB': {
      gestor: null,
      membros: [
        "Matheus Eleut√©rio | NCA"
      ]
    },
    'Previd√™ncia/Aperam': {
      gestor: null,
      membros: [
        "Mario Assis | NCA", "Ana Cl√°udia | NCA"
      ]
    }
  };

  const testUsers = [
    { email: 'admin@escritorio.com', senha: '123456', permissao: 'admin', equipe: null },
    { email: 'mod@escritorio.com', senha: '123456', permissao: 'mod', equipe: null }
  ];

  // Adicionar usu√°rios das equipes (apenas primeiros 2 nomes)
  Object.entries(equipes).forEach(([nomeEquipe, equipeDados]) => {
    equipeDados.membros.forEach(nome => {
      // Extrair apenas os 2 primeiros nomes
      const nomeParts = nome.split('|')[0].trim().split(' ');
      const primeirosDoisNomes = nomeParts.slice(0, 2).join('.');

      const email = primeirosDoisNomes.toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Remove acentos
        .replace(/[^a-z0-9.]/g, '') + '@neycampos.adv.br';

      testUsers.push({
        email,
        senha: '123456',
        permissao: 'advogado',
        equipe: nomeEquipe
      });
    });
  });

  let usersCreated = 0;

  for (const user of testUsers) {
    // Log detalhado para debug
    if (process.env.NODE_ENV !== 'production') {
      console.log(`üîç Tentando criar usu√°rio: ${user.email} (${user.permissao}${user.equipe ? ` - ${user.equipe}` : ''})`);
    }
    
    try {
      const existingUser = await query(
        "SELECT email FROM funcionarios WHERE email = ?",
        [user.email]
      );
      
      if (existingUser.rows.length === 0) {
        const result = await query(
          "INSERT INTO funcionarios (email, senha, permissao, equipe) VALUES (?, ?, ?, ?)",
          [user.email, user.senha, user.permissao, user.equipe || null]
        );
        
        if (result.changes > 0) {
          console.log(`‚úÖ Usu√°rio criado: ${user.email} (${user.permissao}${user.equipe ? ` - ${user.equipe}` : ''})`);
          usersCreated++;
        } else {
          console.warn(`‚ö†Ô∏è Usu√°rio n√£o foi criado (sem mudan√ßas): ${user.email}`);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          console.log(`‚ÑπÔ∏è Usu√°rio j√° existe: ${user.email}`);
        }
      }
    } catch (error) {
      console.error(`‚ùå Erro ao criar usu√°rio ${user.email}:`, error.message);
      console.error(`üìã Dados do usu√°rio:`, {
        email: user.email,
        permissao: user.permissao,
        equipe: user.equipe || 'null'
      });
    }
  }

  if (usersCreated > 0) {
    console.log(`üÜï ${usersCreated} usu√°rios criados nesta inicializa√ß√£o`);
  } else {
    console.log(`‚ÑπÔ∏è Nenhum usu√°rio novo foi criado (todos j√° existem)`);
  }

  // Criar equipes tempor√°rias com gestores
  console.log('üë• Criando equipes tempor√°rias com gestores...');
  try {
    // Limpar equipes antigas
    await query("DELETE FROM equipes_temp");

    let equipesCreated = 0;
    for (const [nomeEquipe, equipeDados] of Object.entries(equipes)) {
      try {
        await query(
          "INSERT INTO equipes_temp (nome, gestor) VALUES (?, ?)",
          [nomeEquipe, equipeDados.gestor]
        );
        equipesCreated++;
      } catch (error) {
        console.error(`‚ùå Erro ao criar equipe ${nomeEquipe}:`, error.message);
      }
    }
    console.log(`‚úÖ ${equipesCreated} equipes criadas`);
  } catch (error) {
    console.error('‚ùå Erro ao criar equipes:', error);
  }

  // Verificar total de usu√°rios ap√≥s cria√ß√£o
  try {
    const totalResult = await query('SELECT COUNT(*) as count FROM funcionarios');
    const total = totalResult.rows[0].count;
    console.log(`üìä Total de funcion√°rios no banco: ${total}`);
  } catch (error) {
    console.error('‚ùå Erro ao contar funcion√°rios:', error);
  }
};

// Fun√ß√£o para testar conectividade
export const testConnection = async () => {
  try {
    const result = await query("SELECT 1 as test");
    console.log('‚úÖ Teste de conectividade bem-sucedido');
    return result;
  } catch (error) {
    console.error('‚ùå Teste de conectividade falhou:', error);
    throw error;
  }
};

// Fun√ß√£o para obter estat√≠sticas do banco
export const getDatabaseStats = async () => {
  try {
    const funcionariosResult = await query("SELECT COUNT(*) as count FROM funcionarios");
    const protocolosResult = await query("SELECT COUNT(*) as count FROM protocolos");
    const aguardandoResult = await query("SELECT COUNT(*) as count FROM protocolos WHERE status = 'Aguardando'");
    
    // Estat√≠sticas adicionais de funcion√°rios por equipe
    const equipesResult = await query(`
      SELECT equipe, COUNT(*) as count 
      FROM funcionarios 
      WHERE equipe IS NOT NULL 
      GROUP BY equipe
    `);
    
    const stats = {
      funcionarios: funcionariosResult.rows[0].count,
      protocolos: protocolosResult.rows[0].count,
      protocolosAguardando: aguardandoResult.rows[0].count,
      funcionariosPorEquipe: equipesResult.rows || [],
      databaseType: 'SQLite Otimizado para Square Cloud',
      environment: process.env.NODE_ENV || 'development'
    };
    
    return stats;
  } catch (error) {
    console.error('‚ùå Erro ao obter estat√≠sticas:', error);
    throw error;
  }
};

// Fun√ß√£o para manuten√ß√£o do banco
export const maintenanceDb = async () => {
  console.log('üîß Executando manuten√ß√£o do banco...');
  
  try {
    // Vacuum para otimizar espa√ßo
    await query("VACUUM");
    
    // Reindexar para otimizar queries
    await query("REINDEX");
    
    // Analisar estat√≠sticas
    await query("ANALYZE");
    
    // Otimizar
    await query("PRAGMA optimize");
    
    console.log('‚úÖ Manuten√ß√£o conclu√≠da');
  } catch (error) {
    console.error('‚ùå Erro na manuten√ß√£o:', error);
  }
};

// Fun√ß√£o para fechar conex√µes (cleanup)
export const closeConnection = async () => {
  await connection.close();
};

// Fun√ß√£o placeholder para backup (implementar futuramente se necess√°rio)
const checkAndRestoreFromBackup = async () => {
  // Implementa√ß√£o futura para backup/restore
  console.log('‚ÑπÔ∏è Sistema de backup n√£o implementado ainda');
};

// Exportar fun√ß√µes principais
export { query, transaction };
export default { query, transaction };